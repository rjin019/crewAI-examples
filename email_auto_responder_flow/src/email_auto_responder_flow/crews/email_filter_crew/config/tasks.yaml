
filter_emails:
  description: >
    "You are given a list of emails:\n{emails}\n\n"
    "For each email, classify it into one of the following categories:\n"
    "- purchases, reservations, primary, meeting, support_request, spam, news\n"
    Classification rules in order:
    - "spam" include:
      * Any wellness/health advice without .edu/.gov domain
      * "plan/program/solution" in subject
      * Giveaway/limited-time offers
      * advertisements

    - purchases: emails related to actual completed purchases, order receipts, invoices, shipping confirmations, or payment reminders. Usually with keywords like "discount", "save", "win", "reward", 
        "deal", "offer", "limited time", "giveaway"

    - reservations: emails related to confirmed bookings such as hotels, flights, events, etc. Has the "Reservation" as part of the subject.

    - meeting: meeting invitations or confirmations, anything with keyword "meeting", "scheduling" or "time to meet".

    - support_request: emails requesting help or assistance

    - news: any newsletters or news

    - "primary" ONLY for:
      * Verified personal/organizational contacts
      * No commercial intent


    Also decide the following flags for each email:
    - show_to_user: true/false
    - needs_auto_reply: true/false

    Rules:
    - purchases, reservations → show_to_user=true, needs_auto_reply=false
    - primary, meeting → show_to_user=true, needs_auto_reply=true
    - news → show_to_user=true, needs_auto_reply=false
    - support_request → show_to_user=false, needs_auto_reply=true
    - spam → show_to_user=false, needs_auto_reply=false

    For each email, output:
    - id subject category show_to_user needs_auto_reply sender
    Only use the email's sender, subject, and snippet. Output must follow the exact format for each email.

  expected_output: >
    A list of email summaries with their classification and handling flags
  agent: email_filter_agent

action_required_emails:
  description: >
    You are given a list of emails as input in the `emails` variable. Here is the list input: {emails}
    Each object has the following fields:
      - id (string)
      - subject (string)
      - sender (string)
      - category (string)
      - show_to_user (boolean)
      - needs_auto_reply (boolean)

    Your job:
      1. ONLY process emails where "needs_auto_reply" is true.
      2. For each, classify the action_type based on the subject and sender:
          - "meeting" → subject contains words like "meeting", "schedule", "calendar", "appointment"
          - "support_request" → subject indicates a problem, issue, request, or help
          - "primary" → anything else that reasonably needs a polite reply

    RULES YOU MUST FOLLOW (NO EXCEPTIONS):
      - DO NOT create or fabricate any email IDs, subjects, senders, or other data.
      - DO NOT write hypothetical, example, or invented content.
      - DO NOT add any emails that do not appear in the input.
      - COPY fields exactly as they appear in the input JSON.
      - DO NOT output email body — only classify.

  expected_output: >
    A JSON list of dicts. Each dict must include:
      - "id" (copied from input)
      - "subject" (copied from input)
      - "sender" (copied from input)
      - "action_type" ("meeting", "support_request", or "primary")
      - "reason" (short phrase explaining why the category was chosen)

  agent: email_action_agent




draft_responses:
  description: >
    You are given a list of emails as input in the `emails` variable. Here is the list input: {emails}, each email includes:
    - id
    - subject
    - sender
    - action_type ("meeting", "support_request", "primary")
    - reason

    Based on the action_type, generate a polite and concise email reply.

    Rules:
    First, categorize what type of responses is needed.
    1. primary: General inquiry or information-sharing emails that don't fit other categories.
    2. meeting:Scheduling or time availability requests.
    3. support_request: Emails describing a problem, bug, or ask for help.

    Second, generate the corresponding response for each type. Ensure your tone is professional and concise.
    - Primary: If is the general information that doesn't required explicit reply, generate nothing.
              Else, reply appropriately with a polite acknowledgment or relevant response.
    - meeting: Propose one or two time slots and ask for confirmation.
    - support_request: Acknowledge the issue, apologize if needed, and offer help or escalation.

    Third, for each reply, output:
    - id: original email ID
    - sender: email's sender
    - to: sender's email address. Eg. if sender is "The New York Times <nytdirect@nytimes.com>", then 'to' is nytdirect@nytimes.com
    - subject: "Re: " + original subject
    - body: the full reply content you generated(no placeholders)
    
  expected_output: >
    Draft email replies, a list of replies in the form:
    - id
    - sender
    - subject
    - action_type
    - body
    - sign as "Best regards,", new line, "Christan Jin"
  agent: email_response_writer